{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reconstructFieldPath = exports.selectFields = void 0;\nconst _ = require(\"lodash\");\nconst selectFields = (req, fields, locations) => _(fields).flatMap(field => _.flatMap(locations, location => {\n  return expandField(req, field, location);\n}))\n// Avoid duplicates if multiple field selections would return the same field twice.\n// E.g. with fields = ['*.foo', 'bar.foo'] and req.body = { bar: { foo: 1 }, baz: { foo: 2 } },\n// the instance bla.foo would appear twice, and baz.foo once.\n.uniqWith(isSameFieldInstance).value();\nexports.selectFields = selectFields;\nfunction isSameFieldInstance(a, b) {\n  return a.path === b.path && a.location === b.location;\n}\nfunction expandField(req, field, location) {\n  const originalPath = field;\n  const pathToExpand = location === 'headers' ? field.toLowerCase() : field;\n  const paths = [];\n  expandPath(req[location], pathToExpand, paths);\n  return paths.map(path => {\n    const value = path === '' ? req[location] : _.get(req[location], path);\n    return {\n      location,\n      path,\n      originalPath,\n      value,\n      originalValue: value\n    };\n  });\n}\nfunction expandPath(object, path, accumulator) {\n  const segments = _.toPath(path);\n  const wildcardPos = segments.indexOf('*');\n  if (wildcardPos > -1) {\n    const subObject = wildcardPos === 0 ? object : _.get(object, segments.slice(0, wildcardPos));\n    if (!subObject || !_.isObjectLike(subObject)) {\n      return;\n    }\n    Object.keys(subObject).map(key => segments\n    // Before the *\n    .slice(0, wildcardPos)\n    // The part that the * matched\n    // #1205 - Escape a legit field \"*\" to avoid it from causing infinite recursion\n    .concat(key === '*' ? `\\\\${key}` : key)\n    // After the *\n    .concat(segments.slice(wildcardPos + 1))).forEach(subPath => {\n      expandPath(object, subPath, accumulator);\n    });\n  } else {\n    const reconstructedPath = reconstructFieldPath(segments);\n    accumulator.push(reconstructedPath);\n  }\n}\n/**\n * Reconstructs a field path from a list of path segments.\n *\n * Most segments will be concatenated by a dot, for example `['foo', 'bar']` becomes `foo.bar`.\n * However, a numeric segment will be wrapped in brackets to match regular JS array syntax:\n *\n * ```\n * reconstructFieldPath(['foo', 0, 'bar']) // foo[0].bar\n * ```\n *\n * Segments which have a special character such as `.` will be wrapped in brackets and quotes,\n * which also matches JS syntax for objects with such keys.\n *\n * ```\n * reconstructFieldPath(['foo', 'bar.baz', 'qux']) // foo[\"bar.baz\"].qux\n * ```\n */\nfunction reconstructFieldPath(segments) {\n  return segments.reduce((prev, segment) => {\n    let part = '';\n    segment = segment === '\\\\*' ? '*' : segment;\n    // TODO: Handle brackets?\n    if (segment.includes('.')) {\n      // Special char key access\n      part = `[\"${segment}\"]`;\n    } else if (/^\\d+$/.test(segment)) {\n      // Index access\n      part = `[${segment}]`;\n    } else if (prev) {\n      // Object key access\n      part = `.${segment}`;\n    } else {\n      // Top level key\n      part = segment;\n    }\n    return prev + part;\n  }, '');\n}\nexports.reconstructFieldPath = reconstructFieldPath;","map":{"version":3,"names":["Object","defineProperty","exports","value","reconstructFieldPath","selectFields","_","require","req","fields","locations","flatMap","field","location","expandField","uniqWith","isSameFieldInstance","a","b","path","originalPath","pathToExpand","toLowerCase","paths","expandPath","map","get","originalValue","object","accumulator","segments","toPath","wildcardPos","indexOf","subObject","slice","isObjectLike","keys","key","concat","forEach","subPath","reconstructedPath","push","reduce","prev","segment","part","includes","test"],"sources":["C:/xz/delivery/src/node_modules/express-validator/src/select-fields.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.reconstructFieldPath = exports.selectFields = void 0;\nconst _ = require(\"lodash\");\nconst selectFields = (req, fields, locations) => _(fields)\n    .flatMap(field => _.flatMap(locations, location => {\n    return expandField(req, field, location);\n}))\n    // Avoid duplicates if multiple field selections would return the same field twice.\n    // E.g. with fields = ['*.foo', 'bar.foo'] and req.body = { bar: { foo: 1 }, baz: { foo: 2 } },\n    // the instance bla.foo would appear twice, and baz.foo once.\n    .uniqWith(isSameFieldInstance)\n    .value();\nexports.selectFields = selectFields;\nfunction isSameFieldInstance(a, b) {\n    return a.path === b.path && a.location === b.location;\n}\nfunction expandField(req, field, location) {\n    const originalPath = field;\n    const pathToExpand = location === 'headers' ? field.toLowerCase() : field;\n    const paths = [];\n    expandPath(req[location], pathToExpand, paths);\n    return paths.map(path => {\n        const value = path === '' ? req[location] : _.get(req[location], path);\n        return {\n            location,\n            path,\n            originalPath,\n            value,\n            originalValue: value,\n        };\n    });\n}\nfunction expandPath(object, path, accumulator) {\n    const segments = _.toPath(path);\n    const wildcardPos = segments.indexOf('*');\n    if (wildcardPos > -1) {\n        const subObject = wildcardPos === 0 ? object : _.get(object, segments.slice(0, wildcardPos));\n        if (!subObject || !_.isObjectLike(subObject)) {\n            return;\n        }\n        Object.keys(subObject)\n            .map(key => segments\n            // Before the *\n            .slice(0, wildcardPos)\n            // The part that the * matched\n            // #1205 - Escape a legit field \"*\" to avoid it from causing infinite recursion\n            .concat(key === '*' ? `\\\\${key}` : key)\n            // After the *\n            .concat(segments.slice(wildcardPos + 1)))\n            .forEach(subPath => {\n            expandPath(object, subPath, accumulator);\n        });\n    }\n    else {\n        const reconstructedPath = reconstructFieldPath(segments);\n        accumulator.push(reconstructedPath);\n    }\n}\n/**\n * Reconstructs a field path from a list of path segments.\n *\n * Most segments will be concatenated by a dot, for example `['foo', 'bar']` becomes `foo.bar`.\n * However, a numeric segment will be wrapped in brackets to match regular JS array syntax:\n *\n * ```\n * reconstructFieldPath(['foo', 0, 'bar']) // foo[0].bar\n * ```\n *\n * Segments which have a special character such as `.` will be wrapped in brackets and quotes,\n * which also matches JS syntax for objects with such keys.\n *\n * ```\n * reconstructFieldPath(['foo', 'bar.baz', 'qux']) // foo[\"bar.baz\"].qux\n * ```\n */\nfunction reconstructFieldPath(segments) {\n    return segments.reduce((prev, segment) => {\n        let part = '';\n        segment = segment === '\\\\*' ? '*' : segment;\n        // TODO: Handle brackets?\n        if (segment.includes('.')) {\n            // Special char key access\n            part = `[\"${segment}\"]`;\n        }\n        else if (/^\\d+$/.test(segment)) {\n            // Index access\n            part = `[${segment}]`;\n        }\n        else if (prev) {\n            // Object key access\n            part = `.${segment}`;\n        }\n        else {\n            // Top level key\n            part = segment;\n        }\n        return prev + part;\n    }, '');\n}\nexports.reconstructFieldPath = reconstructFieldPath;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}